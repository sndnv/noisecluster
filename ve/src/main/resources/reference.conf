akka.extensions = ["akka.cluster.pubsub.DistributedPubSub"]
akka.actor.provider = "akka.cluster.ClusterActorRefProvider"
akka.remote.netty.tcp.port = 0
akka.remote.netty.tcp.hostname = "localhost"
akka.actor.serializers.java = "akka.serialization.JavaSerializer"
akka.actor.serialization-bindings {
  "noisecluster.jvm.control.cluster.Messages$StartAudio" = java
  "noisecluster.jvm.control.cluster.Messages$StopAudio" = java
  "noisecluster.jvm.control.cluster.Messages$StartTransport" = java
  "noisecluster.jvm.control.cluster.Messages$StopTransport" = java
  "noisecluster.jvm.control.cluster.Messages$StopApplication" = java
  "noisecluster.jvm.control.cluster.Messages$StopHost" = java
  "noisecluster.jvm.control.cluster.Messages$SetHostVolume" = java
  "noisecluster.jvm.control.cluster.Messages$MuteHost" = java
  "noisecluster.jvm.control.cluster.Messages$UnmuteHost" = java
  "noisecluster.jvm.control.cluster.Messages$RegisterSource" = java
  "noisecluster.jvm.control.cluster.Messages$RegisterTarget" = java
  "noisecluster.jvm.control.cluster.Messages$Ping" = java
  "noisecluster.jvm.control.cluster.Messages$Pong" = java
}
akka.loggers = ["akka.event.slf4j.Slf4jLogger"]

noisecluster.ve {
  audio {
    format {
      sampleRate = 48000
      sampleSizeInBits = 16
      channels = 2
      signed = true
      bigEndian = false
    }
    start {
      volume = 70 //in %
      muted = false
    }
  }

  control {
    systemName = "<some system name>" //needs to be the same on all nodes
    messengerName = "<some unique messenger name>" //needs to be unique
    cluster {
      host = "<some host>"
      port = 50040
    }
    local {
      host = "<some local interface>"
      port = 50041
      actions {
        lastSourceDown { //defines an action to take, if all sources become unreachable
          service = "application" //one of: [audio, transport, application, host]
          action = "restart" //one of: [start, stop or restart]
          delay = 15 //in seconds
        }
      }
    }
  }

  transport {
    provider = "udp" //one of: [udp, aeron]
    aeron {
      stream = 42
      address = "224.1.1.42"
      port = 50042
    }
    udp {
      address = null
      port = 50042
    }
  }

  host {
    stopTimeout = 0 //number of seconds to wait before the host is stopped/restarted; set to 0 (or negative) to disable (default)
  }

  app {
    stopTimeout = 0 //number of seconds to wait before the application is stopped/restarted; set to 0 (or negative) to disable (default)
    serviceName = "ve"
  }
}
